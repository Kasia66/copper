#!/usr/bin/env ruby
require 'thor'
require 'yaml'
require 'colorize'
require_relative '../lib/copper'

module Copper
	class CopperCLI < Thor
		package_name "copper"

		desc "version", "Show Copper version"
		def version
			say "#{::Copper::APP_NAME} #{::Copper::VERSION}\n#{::Copper::COPYRIGHT_MESSAGE}"
		end

		desc "update", "Update Copper to the latest version"
		option :version, type: :string, desc: "Force a specific version"
		def update
			say "Updating Copper..."
			unless options[:version]
				say `gem install c66-copper --no-ri --no-rdoc`
			else
				say `gem install c66-copper -v #{options[:version]} --no-ri --no-rdoc`
			end
		end

		desc "check", "Runs the given rules against a file"
		option :rules, type: :string, desc: "Rules in ccop file format"
		option :file, type: :string, desc: "Configuration file"
		option :format, type: :string, enum: ['yaml'], default: 'yaml'
		option :debug, type: :boolean, default: false
		option :'parserdebug', type: :boolean, default: false
		def check
			$debug = options[:debug] || false
			$parser_debug = options[:'parserdebug'] || false
			require 'byebug' if $debug

			rule_file = options[:rules]
			if !rule_file
				puts "No rule file provided. Use --rule option".red
				exit(1)
			end

			unless File.exists?(rule_file)
				puts "Rule file #{rule_file} not found".red
				exit(1)
			end
			content_file = options[:file]
			if !content_file
				puts "No config file provided. Use --file option".red
				exit(1)
			end

			unless File.exists?(content_file)
				puts "Config file #{content_file} not found".red
				exit(1)
			end

			rules = File.read(rule_file)
			if rules.empty?
				puts "Empty rules file".red
				exit(2)
			end
			raise ::NotImplementedError if options[:format] != 'yaml'
			# load the yaml file and split them into separate yamls

			failed = false
			content = File.read(content_file)
			if content.empty?
				puts "Empty config file".red
				exit(2)
			end
			content.split('---').each_with_index do |part, idx|
				puts "Validating part #{idx}"
				file = YAML::load(part)
				failed = validate(rules, file, content_file)
			end

			exit(1) if failed
		end

		no_commands {
		def validate(rules, file, filename)
			ccop = ::Copper::Copper.new(rules, { context: file, filename: filename })
			results = ccop.execute

			if results.nil?
				puts "Aborting"
				exit(2)
			end

			failed = false
			results.each do |rule|
				action = rule[:action]
				outcome = rule[:outcome]
				if !outcome
					if action == :warn
						outcome_text = 'WARN'.yellow
					else
						failed = true
						outcome_text = 'FAIL'.red
					end
				else
					outcome_text = 'PASS'.green
				end
				puts "\t#{rule[:name]} - #{outcome_text}"
			end
			return failed
		rescue ::Copper::ParseError => exc
			puts "Syntax error: #{exc.message} at line #{ccop.parser.failure_line}, column: #{ccop.parser.failure_column}"
			return true
		rescue ::Copper::RuntimeError => exc
			puts "Runtime error: #{exc.message}"
			return true
		end

		}

	end

	CopperCLI.start
end
